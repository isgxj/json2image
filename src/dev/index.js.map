{"version":3,"file":"index.js","sources":["../index.js"],"sourcesContent":["if (!Object.assign) {\n  Object.assign = function (target) {\n    if (target === null || target === undefined) {\n      target = {};\n    }\n    target = Object(target);\n    for (var index = 1; index < arguments.length; index++) {\n      var source = arguments[index];\n      if (source != null) {\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n    }\n    return target;\n  };\n}\n\n\nfunction drawCanvas(data, callback, callbackError) {\n  let canvas = document.createElement('canvas');\n\n  // 默认配置\n  const defaultData = {\n    width: 750,\n    height: 10,\n    lineHeight: 1.5,\n    color: '#263238',\n    textAlign: 'left',\n    fontSize: 14,\n    fontFamily:\n      '\"PingFang SC\",tahoma,arial,\"helvetica neue\",\"hiragino sans gb\",\"microsoft yahei\",sans-serif',\n    autoHeight: false,\n    ratio: 2,\n    bgColor: 'rgba(255, 255, 255, 0)',\n    elements: [],\n  };\n  // 合并配置数据\n  const newData = Object.assign({}, defaultData, data);\n  const ctx = canvas.getContext('2d');\n\n  const ratio = newData.ratio;\n  const getRatio = function (num) {\n    return num * ratio;\n  };\n\n  // 当前Y坐标\n  let currentY = 0;\n  // 已经绘制节点数\n  let drawedElementCount = 0;\n  // 已经加载图片数\n  let loadedImgCount = 0;\n  // 节点总数\n  let elementLength = 0;\n  // 图片节点数\n  let imgElementLength = 0;\n\n  // 调整清晰度\n  newData.width *= ratio;\n  newData.height *= ratio;\n\n  // 设置canvas宽高\n  canvas.width = newData.width;\n  canvas.height = newData.height;\n\n  // 初始化背景\n  ctx.fillStyle = newData.bgColor;\n  ctx.fillRect(0, 0, newData.width, newData.height);\n\n  // 设计文字基线\n  ctx.textBaseline = 'middle';\n\n  const isTextAlignCenter = function (textAlign) {\n    return textAlign === 'center';\n  };\n\n  const isTextAlignRight = function (textAlign) {\n    return textAlign === 'right' || textAlign === 'end';\n  };\n\n  // 指定宽高内绘制图片（background-size:cover方式）\n  const drawImgCover = function (img, contW, contH, startX, startY) {\n    if (img.width / img.height >= contW / contH) {\n      const dH = img.height;\n      const dW = Math.ceil((contW / contH) * dH);\n      ctx.drawImage(\n        img,\n        (img.width - dW) / 2,\n        0,\n        dW,\n        img.height,\n        startX,\n        startY,\n        contW,\n        contH\n      );\n    } else {\n      const dW = img.width;\n      const dH = Math.ceil((contH / contW) * dW);\n      ctx.drawImage(\n        img,\n        0,\n        (img.height - dH) / 2,\n        img.width,\n        dH,\n        startX,\n        startY,\n        contW,\n        contH\n      );\n    }\n  };\n\n  // 自动换行\n  const canvasTextAutoLine = function (\n    str,\n    initX,\n    initY,\n    width,\n    height,\n    lineHeight\n  ) {\n    let lineWidth = 0;\n    let lastSubStrIndex = 0;\n    const strLen = str.length;\n    for (let i = 0; i < strLen; i++) {\n      lineWidth += ctx.measureText(str[i]).width;\n      if (lineWidth > width) {\n        ctx.fillText(str.substring(lastSubStrIndex, i), initX, initY);\n        initY += lineHeight;\n        if (newData.autoHeight && initY >= height) {\n          currentY += lineHeight;\n        }\n        lineWidth = ctx.measureText(str[i]).width;\n        lastSubStrIndex = i;\n      }\n      if (i === str.length - 1) {\n        ctx.fillText(str.substring(lastSubStrIndex, i + 1), initX, initY);\n      }\n    }\n  };\n\n  // 绘制圆角并裁剪\n  const drawRoundedRect = function (x, y, width, height, r) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(x + r, y);\n    ctx.arcTo(x + width, y, x + width, y + r, r);\n    ctx.arcTo(x + width, y + height, x + width - r, y + height, r);\n    ctx.arcTo(x, y + height, x, y + height - r, r);\n    ctx.arcTo(x, y, x + r, y, r);\n    ctx.closePath();\n    ctx.clip();\n  };\n\n  // 居中图片\n  const centerImg = function (img, startX, startY, w, h) {\n    const x = startX + (newData.width - w) / 2;\n    ctx.drawImage(img, x, startY, w, h);\n  };\n\n  // 居右图片\n  const rightImg = function (img, startX, startY, w, h) {\n    const x = startX + newData.width - w;\n    ctx.drawImage(img, x, startY, w, h);\n  };\n\n  // 最大长度省略文字\n  const ellipsis = function (str, maxWidth) {\n    const strLen = str.length;\n    for (let i = 0; i < strLen; i++) {\n      if (ctx.measureText(str.substr(0, i + 1)).width > maxWidth) {\n        return `${str.substr(0, i)}...`;\n      }\n    }\n    return str;\n  };\n\n  // 导出\n  const output = function () {\n    // 获取可变部分图像\n    const contW = newData.width;\n    let contH = newData.height;\n\n    if (newData.autoHeight) {\n      contH += currentY;\n    }\n    const main = ctx.getImageData(0, 0, contW, contH);\n\n    // 重新建空画布\n    canvas.width = contW;\n    canvas.height = contH;\n    ctx.clearRect(0, 0, contW, newData.height); //清空\n\n    // 绘制可变部分图像\n    ctx.putImageData(main, 0, 0);\n\n    // 导出图片url\n    const dataUrl = canvas.toDataURL('image/png', 1);\n    setTimeout(function () {\n      callback && callback(dataUrl);\n    }, 100);\n  };\n\n  // 每次绘制节点完成后检查是否全部绘制完成\n  const checkOutput = function () {\n    drawedElementCount++;\n    if (drawedElementCount === elementLength) {\n      output();\n    }\n  };\n\n  // 加载图片\n  const loadImage = function (imgArr, cb) {\n    imgArr.forEach(function (item) {\n      if (!item) return;\n      const Img = new Image();\n      Img.crossOrigin = 'anonymous';\n      Img.src = item.content;\n\n      Img.onload = function () {\n        item.imgObj = this;\n        loadedImgCount++;\n        if (loadedImgCount === imgElementLength) {\n          cb && cb();\n        }\n      };\n\n      Img.onerror = function (err) {\n        callbackError && callbackError(err);\n        return false;\n      };\n    });\n  };\n\n  // 文字片段绘制\n  const drawTextArr = function (\n    contentArr,\n    x,\n    y,\n    w,\n    lineHeight,\n    color,\n    fontSize,\n    fontfamily,\n    autoHeight\n  ) {\n    if (!contentArr || !contentArr.length) return;\n    const initX = x;\n    let initY = y;\n    let lineWidth = 0;\n    const textAlign = ctx.textAlign;\n    const contObjs = [];\n    let contObjsLen = 0;\n\n    // 先计算出每个字的位置和状态\n    contentArr.forEach(function (item) {\n      const strtxt = item.content;\n      let font =\n        (getRatio(item.fontSize) || fontSize) +\n        'px ' +\n        (item.fontfamily || fontfamily);\n      if (item.bold) {\n        font = item.bold + ' ' + ctx.font;\n      }\n      for (let i = 0; i < strtxt.length; i++) {\n        const curW = ctx.measureText(strtxt[i]).width;\n        lineWidth += curW;\n        if (lineWidth > w && autoHeight) {\n          initY += lineHeight;\n          if (newData.autoHeight) {\n            currentY += lineHeight;\n          }\n          lineWidth = curW;\n          contObjsLen += 1;\n        }\n        if (!contObjs[contObjsLen]) contObjs[contObjsLen] = [];\n        contObjs[contObjsLen].push({\n          content: strtxt[i],\n          x: initX + lineWidth - curW,\n          y: initY,\n          color: item.color || color,\n          font,\n        });\n      }\n    });\n\n    // 每绘制\n    contObjs.forEach(function (item) {\n      const itemW = ctx.measureText(item.map(ii => ii.content).join('')).width;\n      item.forEach(function (obj) {\n        ctx.fillStyle = obj.color;\n        ctx.font = obj.font;\n        let nx = obj.x;\n        if (isTextAlignCenter(textAlign)) {\n          nx -= itemW / 2;\n        }\n        if (isTextAlignRight(textAlign)) {\n          nx -= itemW;\n        }\n        ctx.textAlign = 'left';\n        ctx.fillText(obj.content, nx, obj.y);\n      });\n    });\n  };\n\n  // 绘制图片\n  const drawImage = function (element) {\n    const x = getRatio(element.x || 0),\n      w = getRatio(element.width || 0);\n    let y = getRatio(element.y || 0),\n      h = getRatio(element.height || 0);\n\n    if (currentY !== 0) {\n      y += currentY;\n    }\n\n    const Img = element.imgObj;\n    const textAlign = element.textAlign;\n\n    ctx.save();\n    if (element.autoHeight) {\n      const newH = Img.height * (w / Img.width);\n      if (newData.autoHeight) {\n        currentY += newH - h;\n      }\n      h = newH;\n    }\n    if (isTextAlignCenter(textAlign)) {\n      centerImg(Img, x, y, w, h);\n    } else if (isTextAlignRight(textAlign)) {\n      rightImg(Img, x, y, w, h);\n    } else {\n      ctx.drawImage(Img, x, y, w, h);\n    }\n\n    ctx.restore();\n\n    if (element.r > 0) {\n      drawRoundedRect(x, y, w, h, element.r);\n    }\n    checkOutput();\n  };\n\n  // 绘制文本\n  const drawText = function (element) {\n    const fontfamily = element.fontfamily || newData.fontFamily,\n      fontSize = getRatio(element.fontSize || newData.fontSize),\n      textAlign = element.textAlign || newData.textAlign,\n      w = getRatio(element.width) || newData.width,\n      h = getRatio(element.height || 0),\n      color = element.color || newData.color,\n      lh = element.lineHeight || newData.lineHeight;\n\n    let font = fontSize + 'px ' + fontfamily,\n      cont = element.content,\n      x = getRatio(element.x || 0),\n      y = getRatio(element.y || 0);\n    const lineHeight = lh * fontSize;\n\n    if (element.bold) {\n      font = element.bold + ' ' + font;\n    }\n\n    switch (textAlign) {\n      case 'center':\n        x += w / 2 || newData.width / 2;\n        break;\n      case 'right':\n      case 'end':\n        x += w || newData.width;\n        break;\n    }\n\n    if (currentY !== 0) {\n      y += currentY;\n    }\n\n    if (element.maxWidth) {\n      cont = ellipsis(cont, element.maxWidth);\n    }\n\n    y += lineHeight / 2;\n\n    // 安卓文字位置有点偏上\n    if (/Android/.test(navigator.userAgent)) {\n      y += 6;\n    }\n\n    ctx.beginPath();\n    ctx.fillStyle = color;\n    ctx.font = font;\n    ctx.textAlign = textAlign;\n    if (typeof cont !== 'string') {\n      drawTextArr(\n        cont,\n        x,\n        y,\n        w,\n        lineHeight,\n        color,\n        fontSize,\n        fontfamily,\n        element.autoHeight\n      );\n    } else if (element.autoHeight) {\n      canvasTextAutoLine(cont, x, y, w, y + h, lineHeight);\n    } else {\n      if (element.rotate) {\n        ctx.rotate((Math.PI / 180) * element.rotate); // 弧度 = (Math.PI/180)*角度\n        const tw = ctx.measureText(cont).width;\n        if (element.rotateCenter && tw < 75) {\n          x = x + 47 - tw / 2;\n        }\n        ctx.fillText(cont, x, y);\n        ctx.fill();\n        ctx.rotate(0);\n      } else {\n        ctx.fillText(cont, x, y);\n        ctx.fill();\n      }\n    }\n    ctx.closePath();\n    checkOutput();\n  };\n\n  const newDataElemenes = newData.elements;\n\n  // 无绘制节点，流程结束\n  if (!newDataElemenes || !newDataElemenes.length) return;\n\n  // 获取所有节点数\n  elementLength = newDataElemenes.length;\n\n  // 获取图片节点数组，使用map可以保存图片在原始数组中的位置\n  const imgArr = newDataElemenes.map(function (item) {\n    if (item.type === 'img') {\n      imgElementLength++;\n      return item;\n    }\n  });\n\n  // 加载所有图片，加载完成后开始绘制\n  loadImage(imgArr, function () {\n    newDataElemenes.forEach(function (item, index) {\n      if (item.type === 'img') {\n        // 取得加载到的图片对象\n        item.imgObj = imgArr[index].imgObj;\n        drawImage(item);\n      } else {\n        drawText(item);\n      }\n    });\n  });\n}\n\nexport default drawCanvas;\n"],"names":["Object","assign","target","index","arguments","length","source","key","prototype","hasOwnProperty","call","data","callback","callbackError","canvas","document","createElement","newData","width","height","lineHeight","color","textAlign","fontSize","fontFamily","autoHeight","ratio","bgColor","elements","ctx","getContext","getRatio","num","currentY","drawedElementCount","loadedImgCount","elementLength","imgElementLength","fillStyle","fillRect","textBaseline","isTextAlignCenter","isTextAlignRight","checkOutput","contW","contH","main","getImageData","clearRect","putImageData","dataUrl","toDataURL","setTimeout","output","drawImage","element","x","w","y","h","Img","imgObj","save","newH","img","startX","startY","centerImg","rightImg","restore","r","beginPath","moveTo","arcTo","closePath","clip","drawRoundedRect","drawText","fontfamily","lh","font","cont","content","bold","maxWidth","str","strLen","i","measureText","substr","ellipsis","test","navigator","userAgent","contentArr","initX","initY","lineWidth","contObjs","contObjsLen","forEach","item","strtxt","curW","push","itemW","map","ii","join","obj","nx","fillText","drawTextArr","lastSubStrIndex","substring","canvasTextAutoLine","rotate","Math","PI","tw","rotateCenter","fill","newDataElemenes","imgArr","type","cb","Image","crossOrigin","src","onload","this","onerror","err","loadImage"],"mappings":"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"}